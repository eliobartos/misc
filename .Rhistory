apponboard = sum(ifelse(apponboard_watched >= 5, 1, 0)),
pct_apponboard = apponboard/users) %>%
ggplot(aes(x = date, y = pct_apponboard)) +
geom_line() +
geom_point() +
scale_y_continuous(breaks = seq(0, 1, 0.02)) +
scale_x_date(breaks = seq.Date(from = as.Date("2018-09-05"), to = as.Date("2018-09-20"), by = 2)) +
ylab("Percentage of Users") +
ggtitle("Pct Users Watched at least 1 ad") +
theme(text = element_text(size=16))
dev.off()
pdf("OneAdPercentage.pdf", width = 16)
data %>%
filter(date >= '2018-09-05') %>%
filter(min_player_level >= 9) %>%
group_by(date) %>%
summarise(users = n_distinct(username),
apponboard = sum(ifelse(apponboard_watched >= 1, 1, 0)),
pct_apponboard = apponboard/users,
billboard = sum(ifelse(billboard_watched >= 1, 1, 0)),
pct_billboard = billboard/users,
interstitial = sum(ifelse(interstitial_watched >= 1, 1, 0)),
pct_interstitial = interstitial/users) %>%
gather(type, percentage, pct_apponboard, pct_billboard, pct_interstitial) %>%
ggplot(aes(x = date, y = percentage, col = type)) +
geom_line() +
geom_point() +
scale_y_continuous(breaks = seq(0, 1, 0.1)) +
scale_x_date(breaks = seq.Date(from = as.Date("2018-09-05"), to = as.Date("2018-09-20"), by = 2)) +
ylab("Percentage of Users") +
ggtitle("Pct Users Watched at least 1 ad") +
theme(text = element_text(size=16))
dev.off()
pdf("BillboardDistribution.pdf", width = 16)
data2 %>%
filter(min_player_level >= 9, times_watched >= 1) %>%
filter(type == "billboard_watched") %>%
group_by(times_watched) %>%
summarise(n = n_distinct(username)) %>%
mutate(users = sum(n),
pct = n/users) %>%
ggplot(aes(x = times_watched, y = pct)) + geom_bar(stat = "identity") +
scale_y_continuous(breaks = seq(0, 1, 0.05)) +
coord_cartesian(xlim = c(0, 20)) +
xlab("Times watched billboard or zeppelin") +
ylab("Percentage of users") +
ggtitle("Daily Watching Billboard or Zeppelin") +
theme(text = element_text(size=16))
dev.off()
data2 %>%
filter(min_player_level <= 9) %>%
filter(times_watched >= 1) %>%
group_by(type) %>%
summarise(m_times_watched = mean(times_watched))
install.packages("roxygen2")
library(roxygen2)
library(misc)
help(package = misc)
library(misc)
help(package = misc)
library(misc)
library(misc)
help(package = "misc")
x = rnorm(300, mean = 5, sd = 1)
y = rnorm(200, mean = 4, sd = 1.5)
mean(x)
mean(y)
np_mean_test(x, y)
np_mean_test <- function(a_data, b_data, n_sim = 1000, plot = TRUE) {
# Nonparametric mean test, comparing mean(b_data) - mean(a_data)
# Negative observed means mean in a group is higher
observed = mean(b_data) - mean(a_data)
data = c(a_data, b_data)
n_a = length(a_data)
n_b = length(b_data)
diff = vector('numeric', length = n_sim)
for(i in 1:n_sim) {
tmp_a = sample(data, n_a, replace = TRUE)
tmp_b = sample(data, n_b, replace = TRUE)
diff[[i]] = mean(tmp_b) - mean(tmp_a)
}
p_value = sum(abs(observed) < abs(diff))/n_sim
# Plot
if(plot) {
bounds = quantile(diff, prob = c(0.025, 0.975))
y_min = min(c(diff, observed))
y_max = max(c(diff, observed))
plot(density(diff), ylim = c(y_min, y_max))
abline(v = observed, col = "red")
abline(v = bounds[[1]], col = "blue", lty = 2 )
abline(v = bounds[[2]], col = "blue", lty = 2)
}
# Create Output
output = list()
output$diff = diff
output$observed = observed
output$n_sim = n_sim
output$p_value = p_value
return(output)
}
np_mean_test(x, y)
np_mean_test <- function(a_data, b_data, n_sim = 1000, plot = TRUE) {
# Nonparametric mean test, comparing mean(b_data) - mean(a_data)
# Negative observed means mean in a group is higher
observed = mean(b_data) - mean(a_data)
data = c(a_data, b_data)
n_a = length(a_data)
n_b = length(b_data)
diff = vector('numeric', length = n_sim)
for(i in 1:n_sim) {
tmp_a = sample(data, n_a, replace = TRUE)
tmp_b = sample(data, n_b, replace = TRUE)
diff[[i]] = mean(tmp_b) - mean(tmp_a)
}
p_value = sum(abs(observed) < abs(diff))/n_sim
# Plot
if(plot) {
bounds = quantile(diff, prob = c(0.025, 0.975))
x_min = min(c(diff, observed))
x_max = max(c(diff, observed))
plot(density(diff), xlim = c(x_min, x_max))
abline(v = observed, col = "red")
abline(v = bounds[[1]], col = "blue", lty = 2 )
abline(v = bounds[[2]], col = "blue", lty = 2)
}
# Create Output
output = list()
output$diff = diff
output$observed = observed
output$n_sim = n_sim
output$p_value = p_value
return(output)
}
np_mean_test(x, y)
np_mean_test <- function(a_data, b_data, n_sim = 1000, plot = TRUE) {
# Nonparametric mean test, comparing mean(b_data) - mean(a_data)
# Negative observed means mean in a group is higher
observed = mean(b_data) - mean(a_data)
data = c(a_data, b_data)
n_a = length(a_data)
n_b = length(b_data)
diff = vector('numeric', length = n_sim)
for(i in 1:n_sim) {
tmp_a = sample(data, n_a, replace = TRUE)
tmp_b = sample(data, n_b, replace = TRUE)
diff[[i]] = mean(tmp_b) - mean(tmp_a)
}
p_value = sum(abs(observed) < abs(diff))/n_sim
# Plot
if(plot) {
bounds = quantile(diff, prob = c(0.025, 0.975))
x_min = min(c(diff, observed))
x_max = max(c(diff, observed))
plot(density(diff), xlim = c(x_min, x_max), title = "Diff distribution")
abline(v = observed, col = "red")
abline(v = bounds[[1]], col = "blue", lty = 2 )
abline(v = bounds[[2]], col = "blue", lty = 2)
}
# Create Output
output = list()
output$diff = diff
output$observed = observed
output$n_sim = n_sim
output$p_value = p_value
return(output)
}
np_mean_test(x, y)
?plot
np_mean_test <- function(a_data, b_data, n_sim = 1000, plot = TRUE) {
# Nonparametric mean test, comparing mean(b_data) - mean(a_data)
# Negative observed means mean in a group is higher
observed = mean(b_data) - mean(a_data)
data = c(a_data, b_data)
n_a = length(a_data)
n_b = length(b_data)
diff = vector('numeric', length = n_sim)
for(i in 1:n_sim) {
tmp_a = sample(data, n_a, replace = TRUE)
tmp_b = sample(data, n_b, replace = TRUE)
diff[[i]] = mean(tmp_b) - mean(tmp_a)
}
p_value = sum(abs(observed) < abs(diff))/n_sim
# Plot
if(plot) {
bounds = quantile(diff, prob = c(0.025, 0.975))
x_min = min(c(diff, observed))
x_max = max(c(diff, observed))
plot(density(diff), xlim = c(x_min, x_max), main = "Diff distribution")
abline(v = observed, col = "red")
abline(v = bounds[[1]], col = "blue", lty = 2 )
abline(v = bounds[[2]], col = "blue", lty = 2)
}
# Create Output
output = list()
output$diff = diff
output$observed = observed
output$n_sim = n_sim
output$p_value = p_value
return(output)
}
np_mean_test(x, y)
y = c(y, 10)
np_mean_test(x, y)
mean(x)
mean(y)
y = c(y, 100)
mean(x)
mean(y)
np_mean_test(x, y)
y
x = rnorm(300, mean = 5, sd = 1)
y = rnorm(200, mean = 4, sd = 1.5)
y2 = c(y, 110)
np_mean_test(x, y)
np_mean_test(x, y2)
out = np_mean_test(x, y)
out2 = np_mean_test(x, y2)
out$diff %>% sd()
out2$diff %>% sd()
np_stat_test <- function(a_data, b_data, n_sim = 1000, plot = TRUE, stat = stat_fun, ...) {
# Nonparametric mean test, comparing mean(b_data) - mean(a_data)
# Negative observed means mean in a group is higher
observed = stat_fun(b_data, ...) - stat_fun(a_data, ...)
data = c(a_data, b_data)
n_a = length(a_data)
n_b = length(b_data)
diff = vector('numeric', length = n_sim)
for(i in 1:n_sim) {
tmp_a = sample(data, n_a, replace = TRUE)
tmp_b = sample(data, n_b, replace = TRUE)
diff[[i]] = stat_fun(tmp_b, ...) - stat_fun(tmp_a, ...)
}
p_value = sum(abs(observed) < abs(diff))/n_sim
# Plot
if(plot) {
bounds = quantile(diff, prob = c(0.025, 0.975))
x_min = min(c(diff, observed))
x_max = max(c(diff, observed))
plot(density(diff), xlim = c(x_min, x_max), main = "Diff distribution")
abline(v = observed, col = "red")
abline(v = bounds[[1]], col = "blue", lty = 2 )
abline(v = bounds[[2]], col = "blue", lty = 2)
}
# Create Output
output = list()
output$diff = diff
output$observed = observed
output$n_sim = n_sim
output$p_value = p_value
return(output)
}
np_stat_test(x, y, mean)
np_stat_test(x, y, mean)
np_stat_test(x, y, mean)
np_stat_test <- function(a_data, b_data, stat_fun = mean, n_sim = 1000, plot = TRUE ...) {
# Nonparametric mean test, comparing mean(b_data) - mean(a_data)
# Negative observed means mean in a group is higher
observed = stat_fun(b_data, ...) - stat_fun(a_data, ...)
data = c(a_data, b_data)
n_a = length(a_data)
n_b = length(b_data)
diff = vector('numeric', length = n_sim)
for(i in 1:n_sim) {
tmp_a = sample(data, n_a, replace = TRUE)
tmp_b = sample(data, n_b, replace = TRUE)
diff[[i]] = stat_fun(tmp_b, ...) - stat_fun(tmp_a, ...)
}
p_value = sum(abs(observed) < abs(diff))/n_sim
# Plot
if(plot) {
bounds = quantile(diff, prob = c(0.025, 0.975))
x_min = min(c(diff, observed))
x_max = max(c(diff, observed))
plot(density(diff), xlim = c(x_min, x_max), main = "Diff distribution")
abline(v = observed, col = "red")
abline(v = bounds[[1]], col = "blue", lty = 2 )
abline(v = bounds[[2]], col = "blue", lty = 2)
}
# Create Output
output = list()
output$diff = diff
output$observed = observed
output$n_sim = n_sim
output$p_value = p_value
return(output)
}
np_stat_test <- function(a_data, b_data, stat_fun = mean, n_sim = 1000, plot = TRUE ...) {
# Nonparametric mean test, comparing mean(b_data) - mean(a_data)
# Negative observed means mean in a group is higher
observed = stat_fun(b_data, ...) - stat_fun(a_data, ...)
data = c(a_data, b_data)
n_a = length(a_data)
n_b = length(b_data)
diff = vector('numeric', length = n_sim)
for(i in 1:n_sim) {
tmp_a = sample(data, n_a, replace = TRUE)
tmp_b = sample(data, n_b, replace = TRUE)
diff[[i]] = stat_fun(tmp_b, ...) - stat_fun(tmp_a, ...)
}
p_value = sum(abs(observed) < abs(diff))/n_sim
# Plot
if(plot) {
bounds = quantile(diff, prob = c(0.025, 0.975))
x_min = min(c(diff, observed))
x_max = max(c(diff, observed))
plot(density(diff), xlim = c(x_min, x_max), main = "Diff distribution")
abline(v = observed, col = "red")
abline(v = bounds[[1]], col = "blue", lty = 2 )
abline(v = bounds[[2]], col = "blue", lty = 2)
}
# Create Output
output = list()
output$diff = diff
output$observed = observed
output$n_sim = n_sim
output$p_value = p_value
return(output)
}
np_stat_test <- function(a_data, b_data, stat_fun = mean, n_sim = 1000, plot = TRUE ...) {
# Nonparametric mean test, comparing mean(b_data) - mean(a_data)
# Negative observed means mean in a group is higher
observed = stat_fun(b_data, ...) - stat_fun(a_data, ...)
data = c(a_data, b_data)
n_a = length(a_data)
n_b = length(b_data)
diff = vector('numeric', length = n_sim)
for(i in 1:n_sim) {
tmp_a = sample(data, n_a, replace = TRUE)
tmp_b = sample(data, n_b, replace = TRUE)
diff[[i]] = stat_fun(tmp_b, ...) - stat_fun(tmp_a, ...)
}
p_value = sum(abs(observed) < abs(diff))/n_sim
# Plot
if(plot) {
bounds = quantile(diff, prob = c(0.025, 0.975))
x_min = min(c(diff, observed))
x_max = max(c(diff, observed))
plot(density(diff), xlim = c(x_min, x_max), main = "Diff distribution")
abline(v = observed, col = "red")
abline(v = bounds[[1]], col = "blue", lty = 2 )
abline(v = bounds[[2]], col = "blue", lty = 2)
}
# Create Output
output = list()
output$diff = diff
output$observed = observed
output$n_sim = n_sim
output$p_value = p_value
return(output)
}
np_stat_test <- function(a_data, b_data, stat_fun = mean, n_sim = 1000, plot = TRUE ...) {
# Nonparametric mean test, comparing mean(b_data) - mean(a_data)
# Negative observed means mean in a group is higher
observed = stat_fun(b_data, ...) - stat_fun(a_data, ...)
data = c(a_data, b_data)
n_a = length(a_data)
n_b = length(b_data)
diff = vector('numeric', length = n_sim)
for(i in 1:n_sim) {
tmp_a = sample(data, n_a, replace = TRUE)
tmp_b = sample(data, n_b, replace = TRUE)
diff[[i]] = stat_fun(tmp_b, ...) - stat_fun(tmp_a, ...)
}
p_value = sum(abs(observed) < abs(diff))/n_sim
# Plot
if(plot) {
bounds = quantile(diff, prob = c(0.025, 0.975))
x_min = min(c(diff, observed))
x_max = max(c(diff, observed))
plot(density(diff), xlim = c(x_min, x_max), main = "Diff distribution")
abline(v = observed, col = "red")
abline(v = bounds[[1]], col = "blue", lty = 2 )
abline(v = bounds[[2]], col = "blue", lty = 2)
}
# Create Output
output = list()
output$diff = diff
output$observed = observed
output$n_sim = n_sim
output$p_value = p_value
return(output)
}
np_stat_test <- function(a_data, b_data, stat_fun = mean, n_sim = 1000, plot = TRUE, ...) {
# Nonparametric mean test, comparing mean(b_data) - mean(a_data)
# Negative observed means mean in a group is higher
observed = stat_fun(b_data, ...) - stat_fun(a_data, ...)
data = c(a_data, b_data)
n_a = length(a_data)
n_b = length(b_data)
diff = vector('numeric', length = n_sim)
for(i in 1:n_sim) {
tmp_a = sample(data, n_a, replace = TRUE)
tmp_b = sample(data, n_b, replace = TRUE)
diff[[i]] = stat_fun(tmp_b, ...) - stat_fun(tmp_a, ...)
}
p_value = sum(abs(observed) < abs(diff))/n_sim
# Plot
if(plot) {
bounds = quantile(diff, prob = c(0.025, 0.975))
x_min = min(c(diff, observed))
x_max = max(c(diff, observed))
plot(density(diff), xlim = c(x_min, x_max), main = "Diff distribution")
abline(v = observed, col = "red")
abline(v = bounds[[1]], col = "blue", lty = 2 )
abline(v = bounds[[2]], col = "blue", lty = 2)
}
# Create Output
output = list()
output$diff = diff
output$observed = observed
output$n_sim = n_sim
output$p_value = p_value
return(output)
}
np_stat_test(x, y, mean)
np_stat_test(x, y, median)
np_stat_test(x, y, quantile, 0.75)
np_stat_test(x, y, quantile, prob = 0.75)
out = np_mean_test(x, y)
out2 = np_mean_test(x, y2)
np_stat_test(x, y, median)
np_stat_test(x, y2, median)
np_stat_test(x, y, median)
np_stat_test(x, y2, median)
np_stat_test(x, y, quantile, prob = 0.9)
np_stat_test(x, y2, quantile, prob = 0.9)
quantile(x, 0.9)
quantile(y2, 0.9)
sd(x)
sd(y)
y = rnorm(200, mean = 4, sd = 1.1)
y2 = c(y, 110)
np_stat_test(x, y, quantile, prob = 0.9)
np_stat_test(x, y2, quantile, prob = 0.9)
y = rnorm(200, mean = 4, sd = 1.5)
np_stat_test(x, y, quantile, prob = 0.9)
np_stat_test(x, y2, quantile, prob = 0.9)
y2 = c(y, 110)
np_stat_test(x, y, quantile, prob = 0.25)
np_stat_test(x, y2, quantile, prob = 0.25)
np_stat_test(x, y, sd)
np_stat_test(x, y2, sd)
np_stat_test(x, y, sd)
sd(x)
sd(y)
sd(x)
sd(y2)
np_stat_test(x, y2, sd)
l = 1:10
mean(l)
mean(l, trim = 0.9)
mean(l, trim = 0.5)
l = c(1, 2, 3, 4, 5, 6, 10)
mean(l, trim = 0.5)
mean(l)
mean(l, trim = 0.9)
l = c(1, 2, 3, 4, 5, 6, 10, 5, 5, 5)
mean(l)
mean(l, trim = 0.9)
?mean
mean(l, trim = 0.1)
mean(c(2, 3, 4, 5, 6, 10, 5, 5, 5))
mean(l, trim = 0.1)
mean(c(2, 3, 4, 5, 6 5, 5, 5))
mean(c(2, 3, 4, 5, 6, 5, 5, 5))
np_stat_test(x, y, mean, trim = 0.01)
np_stat_test(x, y2, mean, trim = 0.01)
np_stat_test(x, y2, mean, trim = 0)
np_stat_test(x, y2, mean, trim = 0.01)
x = rnorm(300, mean = 5, sd = 1)
y = rnorm(200, mean = 4, sd = 1.5)
y2 = c(y, 110)
out = np_mean_test(x, y)
out2 = np_mean_test(x, y2)
out = np_mean_test(x, y)
out2 = np_mean_test(x, y2)
np_stat_test(x, y, median)
np_stat_test(x, y2, median)
np_stat_test(x, y, quantile, prob = 0.9)
np_stat_test(x, y2, quantile, prob = 0.9)
np_stat_test(x, y, quantile, prob = 0.25)
np_stat_test(x, y2, quantile, prob = 0.25)
np_stat_test(x, y, quantile, prob = 0.9)
np_stat_test(x, y2, quantile, prob = 0.9)
y = rnorm(200, mean = 4, sd = 2)
y2 = c(y, 110)
np_stat_test(x, y, quantile, prob = 0.9)
np_stat_test(x, y2, quantile, prob = 0.9)
np_stat_test(x, y, median)
np_stat_test(x, y2, median)
np_stat_test(x, y, quantile, prob = 0.25)
np_stat_test(x, y2, quantile, prob = 0.25)
np_stat_test(x, y, mean, trim = 0.01)
np_stat_test(x, y2, mean, trim = 0.01)
np_stat_test(x, y, sd)
help(package = misc)
x = rnorm(300, mean = 5, sd = 1)
y = rnorm(200, mean = 4, sd = 2)
y2 = c(y, 110)
out = np_mean_test(x, y)
out2 = np_mean_test(x, y2)
np_stat_test(x, y, median)
np_stat_test(x, y2, median)
np_stat_test(x, y, quantile, prob = 0.9)
np_stat_test(x, y2, quantile, prob = 0.9)
np_stat_test(x, y, quantile, prob = 0.25)
np_stat_test(x, y2, quantile, prob = 0.25)
np_stat_test(x, y, mean, trim = 0.01)
np_stat_test(x, y2, mean, trim = 0.01)
np_stat_test(x, y, sd)
np_stat_test(x, y, max)
np_stat_test(x, y, min)
